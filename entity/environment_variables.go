// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EnvironmentVariable is an object representing the database table.
type EnvironmentVariable struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID   string      `boil:"tenant_id" json:"tenantID" toml:"tenantID" yaml:"tenantID"`
	EnvKey     null.String `boil:"env_key" json:"envKey,omitempty" toml:"envKey" yaml:"envKey,omitempty"`
	StageID    null.String `boil:"stage_id" json:"stageID,omitempty" toml:"stageID" yaml:"stageID,omitempty"`
	EnvValue   null.String `boil:"env_value" json:"envValue,omitempty" toml:"envValue" yaml:"envValue,omitempty"`
	DefaultFLG null.Int    `boil:"default_flg" json:"defaultFLG,omitempty" toml:"defaultFLG" yaml:"defaultFLG,omitempty"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt  time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *environmentVariableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L environmentVariableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EnvironmentVariableColumns = struct {
	ID         string
	TenantID   string
	EnvKey     string
	StageID    string
	EnvValue   string
	DefaultFLG string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	TenantID:   "tenant_id",
	EnvKey:     "env_key",
	StageID:    "stage_id",
	EnvValue:   "env_value",
	DefaultFLG: "default_flg",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

var EnvironmentVariableTableColumns = struct {
	ID         string
	TenantID   string
	EnvKey     string
	StageID    string
	EnvValue   string
	DefaultFLG string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "environment_variables.id",
	TenantID:   "environment_variables.tenant_id",
	EnvKey:     "environment_variables.env_key",
	StageID:    "environment_variables.stage_id",
	EnvValue:   "environment_variables.env_value",
	DefaultFLG: "environment_variables.default_flg",
	UpdatedAt:  "environment_variables.updated_at",
	CreatedAt:  "environment_variables.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EnvironmentVariableWhere = struct {
	ID         whereHelperstring
	TenantID   whereHelperstring
	EnvKey     whereHelpernull_String
	StageID    whereHelpernull_String
	EnvValue   whereHelpernull_String
	DefaultFLG whereHelpernull_Int
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "`environment_variables`.`id`"},
	TenantID:   whereHelperstring{field: "`environment_variables`.`tenant_id`"},
	EnvKey:     whereHelpernull_String{field: "`environment_variables`.`env_key`"},
	StageID:    whereHelpernull_String{field: "`environment_variables`.`stage_id`"},
	EnvValue:   whereHelpernull_String{field: "`environment_variables`.`env_value`"},
	DefaultFLG: whereHelpernull_Int{field: "`environment_variables`.`default_flg`"},
	UpdatedAt:  whereHelpertime_Time{field: "`environment_variables`.`updated_at`"},
	CreatedAt:  whereHelpertime_Time{field: "`environment_variables`.`created_at`"},
}

// EnvironmentVariableRels is where relationship names are stored.
var EnvironmentVariableRels = struct {
}{}

// environmentVariableR is where relationships are stored.
type environmentVariableR struct {
}

// NewStruct creates a new relationship struct
func (*environmentVariableR) NewStruct() *environmentVariableR {
	return &environmentVariableR{}
}

// environmentVariableL is where Load methods for each relationship are stored.
type environmentVariableL struct{}

var (
	environmentVariableAllColumns            = []string{"id", "tenant_id", "env_key", "stage_id", "env_value", "default_flg", "updated_at", "created_at"}
	environmentVariableColumnsWithoutDefault = []string{"id", "tenant_id", "env_key", "stage_id", "env_value", "default_flg"}
	environmentVariableColumnsWithDefault    = []string{"updated_at", "created_at"}
	environmentVariablePrimaryKeyColumns     = []string{"id"}
	environmentVariableGeneratedColumns      = []string{}
)

type (
	// EnvironmentVariableSlice is an alias for a slice of pointers to EnvironmentVariable.
	// This should almost always be used instead of []EnvironmentVariable.
	EnvironmentVariableSlice []*EnvironmentVariable
	// EnvironmentVariableHook is the signature for custom EnvironmentVariable hook methods
	EnvironmentVariableHook func(context.Context, boil.ContextExecutor, *EnvironmentVariable) error

	environmentVariableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	environmentVariableType                 = reflect.TypeOf(&EnvironmentVariable{})
	environmentVariableMapping              = queries.MakeStructMapping(environmentVariableType)
	environmentVariablePrimaryKeyMapping, _ = queries.BindMapping(environmentVariableType, environmentVariableMapping, environmentVariablePrimaryKeyColumns)
	environmentVariableInsertCacheMut       sync.RWMutex
	environmentVariableInsertCache          = make(map[string]insertCache)
	environmentVariableUpdateCacheMut       sync.RWMutex
	environmentVariableUpdateCache          = make(map[string]updateCache)
	environmentVariableUpsertCacheMut       sync.RWMutex
	environmentVariableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var environmentVariableAfterSelectHooks []EnvironmentVariableHook

var environmentVariableBeforeInsertHooks []EnvironmentVariableHook
var environmentVariableAfterInsertHooks []EnvironmentVariableHook

var environmentVariableBeforeUpdateHooks []EnvironmentVariableHook
var environmentVariableAfterUpdateHooks []EnvironmentVariableHook

var environmentVariableBeforeDeleteHooks []EnvironmentVariableHook
var environmentVariableAfterDeleteHooks []EnvironmentVariableHook

var environmentVariableBeforeUpsertHooks []EnvironmentVariableHook
var environmentVariableAfterUpsertHooks []EnvironmentVariableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EnvironmentVariable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EnvironmentVariable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EnvironmentVariable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EnvironmentVariable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EnvironmentVariable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EnvironmentVariable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EnvironmentVariable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EnvironmentVariable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EnvironmentVariable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEnvironmentVariableHook registers your hook function for all future operations.
func AddEnvironmentVariableHook(hookPoint boil.HookPoint, environmentVariableHook EnvironmentVariableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		environmentVariableAfterSelectHooks = append(environmentVariableAfterSelectHooks, environmentVariableHook)
	case boil.BeforeInsertHook:
		environmentVariableBeforeInsertHooks = append(environmentVariableBeforeInsertHooks, environmentVariableHook)
	case boil.AfterInsertHook:
		environmentVariableAfterInsertHooks = append(environmentVariableAfterInsertHooks, environmentVariableHook)
	case boil.BeforeUpdateHook:
		environmentVariableBeforeUpdateHooks = append(environmentVariableBeforeUpdateHooks, environmentVariableHook)
	case boil.AfterUpdateHook:
		environmentVariableAfterUpdateHooks = append(environmentVariableAfterUpdateHooks, environmentVariableHook)
	case boil.BeforeDeleteHook:
		environmentVariableBeforeDeleteHooks = append(environmentVariableBeforeDeleteHooks, environmentVariableHook)
	case boil.AfterDeleteHook:
		environmentVariableAfterDeleteHooks = append(environmentVariableAfterDeleteHooks, environmentVariableHook)
	case boil.BeforeUpsertHook:
		environmentVariableBeforeUpsertHooks = append(environmentVariableBeforeUpsertHooks, environmentVariableHook)
	case boil.AfterUpsertHook:
		environmentVariableAfterUpsertHooks = append(environmentVariableAfterUpsertHooks, environmentVariableHook)
	}
}

// OneG returns a single environmentVariable record from the query using the global executor.
func (q environmentVariableQuery) OneG(ctx context.Context) (*EnvironmentVariable, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single environmentVariable record from the query.
func (q environmentVariableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EnvironmentVariable, error) {
	o := &EnvironmentVariable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for environment_variables")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all EnvironmentVariable records from the query using the global executor.
func (q environmentVariableQuery) AllG(ctx context.Context) (EnvironmentVariableSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EnvironmentVariable records from the query.
func (q environmentVariableQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnvironmentVariableSlice, error) {
	var o []*EnvironmentVariable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to EnvironmentVariable slice")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all EnvironmentVariable records in the query using the global executor
func (q environmentVariableQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EnvironmentVariable records in the query.
func (q environmentVariableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count environment_variables rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q environmentVariableQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q environmentVariableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if environment_variables exists")
	}

	return count > 0, nil
}

// EnvironmentVariables retrieves all the records using an executor.
func EnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	mods = append(mods, qm.From("`environment_variables`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`environment_variables`.*"})
	}

	return environmentVariableQuery{q}
}

// FindEnvironmentVariableG retrieves a single record by ID.
func FindEnvironmentVariableG(ctx context.Context, iD string, selectCols ...string) (*EnvironmentVariable, error) {
	return FindEnvironmentVariable(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEnvironmentVariable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEnvironmentVariable(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*EnvironmentVariable, error) {
	environmentVariableObj := &EnvironmentVariable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `environment_variables` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, environmentVariableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from environment_variables")
	}

	if err = environmentVariableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return environmentVariableObj, err
	}

	return environmentVariableObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EnvironmentVariable) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EnvironmentVariable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no environment_variables provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(environmentVariableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	environmentVariableInsertCacheMut.RLock()
	cache, cached := environmentVariableInsertCache[key]
	environmentVariableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			environmentVariableAllColumns,
			environmentVariableColumnsWithDefault,
			environmentVariableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `environment_variables` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `environment_variables` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `environment_variables` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, environmentVariablePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into environment_variables")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for environment_variables")
	}

CacheNoHooks:
	if !cached {
		environmentVariableInsertCacheMut.Lock()
		environmentVariableInsertCache[key] = cache
		environmentVariableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single EnvironmentVariable record using the global executor.
// See Update for more documentation.
func (o *EnvironmentVariable) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EnvironmentVariable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EnvironmentVariable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	environmentVariableUpdateCacheMut.RLock()
	cache, cached := environmentVariableUpdateCache[key]
	environmentVariableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			environmentVariableAllColumns,
			environmentVariablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update environment_variables, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `environment_variables` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, environmentVariablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, append(wl, environmentVariablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update environment_variables row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for environment_variables")
	}

	if !cached {
		environmentVariableUpdateCacheMut.Lock()
		environmentVariableUpdateCache[key] = cache
		environmentVariableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q environmentVariableQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q environmentVariableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for environment_variables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for environment_variables")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EnvironmentVariableSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EnvironmentVariableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `environment_variables` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, environmentVariablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in environmentVariable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all environmentVariable")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EnvironmentVariable) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLEnvironmentVariableUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EnvironmentVariable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no environment_variables provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(environmentVariableColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEnvironmentVariableUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	environmentVariableUpsertCacheMut.RLock()
	cache, cached := environmentVariableUpsertCache[key]
	environmentVariableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			environmentVariableAllColumns,
			environmentVariableColumnsWithDefault,
			environmentVariableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			environmentVariableAllColumns,
			environmentVariablePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert environment_variables, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`environment_variables`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `environment_variables` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for environment_variables")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for environment_variables")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for environment_variables")
	}

CacheNoHooks:
	if !cached {
		environmentVariableUpsertCacheMut.Lock()
		environmentVariableUpsertCache[key] = cache
		environmentVariableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single EnvironmentVariable record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EnvironmentVariable) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EnvironmentVariable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EnvironmentVariable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no EnvironmentVariable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), environmentVariablePrimaryKeyMapping)
	sql := "DELETE FROM `environment_variables` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from environment_variables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for environment_variables")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q environmentVariableQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q environmentVariableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no environmentVariableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from environment_variables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for environment_variables")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EnvironmentVariableSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EnvironmentVariableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(environmentVariableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `environment_variables` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, environmentVariablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from environmentVariable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for environment_variables")
	}

	if len(environmentVariableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EnvironmentVariable) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("entity: no EnvironmentVariable provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EnvironmentVariable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEnvironmentVariable(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EnvironmentVariableSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("entity: empty EnvironmentVariableSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EnvironmentVariableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EnvironmentVariableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `environment_variables`.* FROM `environment_variables` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, environmentVariablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in EnvironmentVariableSlice")
	}

	*o = slice

	return nil
}

// EnvironmentVariableExistsG checks if the EnvironmentVariable row exists.
func EnvironmentVariableExistsG(ctx context.Context, iD string) (bool, error) {
	return EnvironmentVariableExists(ctx, boil.GetContextDB(), iD)
}

// EnvironmentVariableExists checks if the EnvironmentVariable row exists.
func EnvironmentVariableExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `environment_variables` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if environment_variables exists")
	}

	return exists, nil
}

// Exists checks if the EnvironmentVariable row exists.
func (o *EnvironmentVariable) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EnvironmentVariableExists(ctx, exec, o.ID)
}
