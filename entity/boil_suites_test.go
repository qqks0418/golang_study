// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrations)
	t.Run("Envs", testEnvs)
	t.Run("EnvSettings", testEnvSettings)
	t.Run("Posts", testPosts)
	t.Run("Stages", testStages)
	t.Run("Tasks", testTasks)
	t.Run("Todos", testTodos)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsDelete)
	t.Run("Envs", testEnvsDelete)
	t.Run("EnvSettings", testEnvSettingsDelete)
	t.Run("Posts", testPostsDelete)
	t.Run("Stages", testStagesDelete)
	t.Run("Tasks", testTasksDelete)
	t.Run("Todos", testTodosDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsQueryDeleteAll)
	t.Run("Envs", testEnvsQueryDeleteAll)
	t.Run("EnvSettings", testEnvSettingsQueryDeleteAll)
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("Stages", testStagesQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
	t.Run("Todos", testTodosQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSliceDeleteAll)
	t.Run("Envs", testEnvsSliceDeleteAll)
	t.Run("EnvSettings", testEnvSettingsSliceDeleteAll)
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("Stages", testStagesSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
	t.Run("Todos", testTodosSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsExists)
	t.Run("Envs", testEnvsExists)
	t.Run("EnvSettings", testEnvSettingsExists)
	t.Run("Posts", testPostsExists)
	t.Run("Stages", testStagesExists)
	t.Run("Tasks", testTasksExists)
	t.Run("Todos", testTodosExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsFind)
	t.Run("Envs", testEnvsFind)
	t.Run("EnvSettings", testEnvSettingsFind)
	t.Run("Posts", testPostsFind)
	t.Run("Stages", testStagesFind)
	t.Run("Tasks", testTasksFind)
	t.Run("Todos", testTodosFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsBind)
	t.Run("Envs", testEnvsBind)
	t.Run("EnvSettings", testEnvSettingsBind)
	t.Run("Posts", testPostsBind)
	t.Run("Stages", testStagesBind)
	t.Run("Tasks", testTasksBind)
	t.Run("Todos", testTodosBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsOne)
	t.Run("Envs", testEnvsOne)
	t.Run("EnvSettings", testEnvSettingsOne)
	t.Run("Posts", testPostsOne)
	t.Run("Stages", testStagesOne)
	t.Run("Tasks", testTasksOne)
	t.Run("Todos", testTodosOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsAll)
	t.Run("Envs", testEnvsAll)
	t.Run("EnvSettings", testEnvSettingsAll)
	t.Run("Posts", testPostsAll)
	t.Run("Stages", testStagesAll)
	t.Run("Tasks", testTasksAll)
	t.Run("Todos", testTodosAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsCount)
	t.Run("Envs", testEnvsCount)
	t.Run("EnvSettings", testEnvSettingsCount)
	t.Run("Posts", testPostsCount)
	t.Run("Stages", testStagesCount)
	t.Run("Tasks", testTasksCount)
	t.Run("Todos", testTodosCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsHooks)
	t.Run("Envs", testEnvsHooks)
	t.Run("EnvSettings", testEnvSettingsHooks)
	t.Run("Posts", testPostsHooks)
	t.Run("Stages", testStagesHooks)
	t.Run("Tasks", testTasksHooks)
	t.Run("Todos", testTodosHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsInsert)
	t.Run("PrismaMigrations", testPrismaMigrationsInsertWhitelist)
	t.Run("Envs", testEnvsInsert)
	t.Run("Envs", testEnvsInsertWhitelist)
	t.Run("EnvSettings", testEnvSettingsInsert)
	t.Run("EnvSettings", testEnvSettingsInsertWhitelist)
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("Stages", testStagesInsert)
	t.Run("Stages", testStagesInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
	t.Run("Todos", testTodosInsert)
	t.Run("Todos", testTodosInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PostToUserUsingAuthorIdUser", testPostToOneUserUsingAuthorIdUser)
	t.Run("TaskToUserUsingUserIdUser", testTaskToOneUserUsingUserIdUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToTaskUsingUserIdTask", testUserOneToOneTaskUsingUserIdTask)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToAuthorIdPosts", testUserToManyAuthorIdPosts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PostToUserUsingAuthorIdPosts", testPostToOneSetOpUserUsingAuthorIdUser)
	t.Run("TaskToUserUsingUserIdTask", testTaskToOneSetOpUserUsingUserIdUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToTaskUsingUserIdTask", testUserOneToOneSetOpTaskUsingUserIdTask)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToAuthorIdPosts", testUserToManyAddOpAuthorIdPosts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsReload)
	t.Run("Envs", testEnvsReload)
	t.Run("EnvSettings", testEnvSettingsReload)
	t.Run("Posts", testPostsReload)
	t.Run("Stages", testStagesReload)
	t.Run("Tasks", testTasksReload)
	t.Run("Todos", testTodosReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsReloadAll)
	t.Run("Envs", testEnvsReloadAll)
	t.Run("EnvSettings", testEnvSettingsReloadAll)
	t.Run("Posts", testPostsReloadAll)
	t.Run("Stages", testStagesReloadAll)
	t.Run("Tasks", testTasksReloadAll)
	t.Run("Todos", testTodosReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSelect)
	t.Run("Envs", testEnvsSelect)
	t.Run("EnvSettings", testEnvSettingsSelect)
	t.Run("Posts", testPostsSelect)
	t.Run("Stages", testStagesSelect)
	t.Run("Tasks", testTasksSelect)
	t.Run("Todos", testTodosSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsUpdate)
	t.Run("Envs", testEnvsUpdate)
	t.Run("EnvSettings", testEnvSettingsUpdate)
	t.Run("Posts", testPostsUpdate)
	t.Run("Stages", testStagesUpdate)
	t.Run("Tasks", testTasksUpdate)
	t.Run("Todos", testTodosUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSliceUpdateAll)
	t.Run("Envs", testEnvsSliceUpdateAll)
	t.Run("EnvSettings", testEnvSettingsSliceUpdateAll)
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("Stages", testStagesSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
	t.Run("Todos", testTodosSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
