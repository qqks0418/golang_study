// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEnvironmentVariables(t *testing.T) {
	t.Parallel()

	query := EnvironmentVariables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEnvironmentVariablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvironmentVariablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EnvironmentVariables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvironmentVariablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EnvironmentVariableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvironmentVariablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EnvironmentVariableExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EnvironmentVariable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EnvironmentVariableExists to return true, but got false.")
	}
}

func testEnvironmentVariablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	environmentVariableFound, err := FindEnvironmentVariable(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if environmentVariableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEnvironmentVariablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EnvironmentVariables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEnvironmentVariablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EnvironmentVariables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEnvironmentVariablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	environmentVariableOne := &EnvironmentVariable{}
	environmentVariableTwo := &EnvironmentVariable{}
	if err = randomize.Struct(seed, environmentVariableOne, environmentVariableDBTypes, false, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}
	if err = randomize.Struct(seed, environmentVariableTwo, environmentVariableDBTypes, false, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = environmentVariableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = environmentVariableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EnvironmentVariables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEnvironmentVariablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	environmentVariableOne := &EnvironmentVariable{}
	environmentVariableTwo := &EnvironmentVariable{}
	if err = randomize.Struct(seed, environmentVariableOne, environmentVariableDBTypes, false, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}
	if err = randomize.Struct(seed, environmentVariableTwo, environmentVariableDBTypes, false, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = environmentVariableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = environmentVariableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func environmentVariableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func environmentVariableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvironmentVariable) error {
	*o = EnvironmentVariable{}
	return nil
}

func testEnvironmentVariablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EnvironmentVariable{}
	o := &EnvironmentVariable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable object: %s", err)
	}

	AddEnvironmentVariableHook(boil.BeforeInsertHook, environmentVariableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	environmentVariableBeforeInsertHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.AfterInsertHook, environmentVariableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	environmentVariableAfterInsertHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.AfterSelectHook, environmentVariableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	environmentVariableAfterSelectHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.BeforeUpdateHook, environmentVariableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	environmentVariableBeforeUpdateHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.AfterUpdateHook, environmentVariableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	environmentVariableAfterUpdateHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.BeforeDeleteHook, environmentVariableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	environmentVariableBeforeDeleteHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.AfterDeleteHook, environmentVariableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	environmentVariableAfterDeleteHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.BeforeUpsertHook, environmentVariableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	environmentVariableBeforeUpsertHooks = []EnvironmentVariableHook{}

	AddEnvironmentVariableHook(boil.AfterUpsertHook, environmentVariableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	environmentVariableAfterUpsertHooks = []EnvironmentVariableHook{}
}

func testEnvironmentVariablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEnvironmentVariablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(environmentVariableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEnvironmentVariablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEnvironmentVariablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EnvironmentVariableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEnvironmentVariablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EnvironmentVariables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	environmentVariableDBTypes = map[string]string{`ID`: `varchar`, `TenantID`: `varchar`, `EnvKey`: `varchar`, `StageID`: `varchar`, `EnvValue`: `varchar`, `DefaultFLG`: `int`, `UpdatedAt`: `datetime`, `CreatedAt`: `datetime`}
	_                          = bytes.MinRead
)

func testEnvironmentVariablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(environmentVariablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(environmentVariableAllColumns) == len(environmentVariablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEnvironmentVariablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(environmentVariableAllColumns) == len(environmentVariablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EnvironmentVariable{}
	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, environmentVariableDBTypes, true, environmentVariablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(environmentVariableAllColumns, environmentVariablePrimaryKeyColumns) {
		fields = environmentVariableAllColumns
	} else {
		fields = strmangle.SetComplement(
			environmentVariableAllColumns,
			environmentVariablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EnvironmentVariableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEnvironmentVariablesUpsert(t *testing.T) {
	t.Parallel()

	if len(environmentVariableAllColumns) == len(environmentVariablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEnvironmentVariableUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EnvironmentVariable{}
	if err = randomize.Struct(seed, &o, environmentVariableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EnvironmentVariable: %s", err)
	}

	count, err := EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, environmentVariableDBTypes, false, environmentVariablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvironmentVariable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EnvironmentVariable: %s", err)
	}

	count, err = EnvironmentVariables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
