// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHoges(t *testing.T) {
	t.Parallel()

	query := Hoges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHogesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHogesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Hoges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHogesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HogeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHogesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HogeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Hoge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HogeExists to return true, but got false.")
	}
}

func testHogesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	hogeFound, err := FindHoge(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if hogeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHogesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Hoges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHogesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Hoges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHogesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	hogeOne := &Hoge{}
	hogeTwo := &Hoge{}
	if err = randomize.Struct(seed, hogeOne, hogeDBTypes, false, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}
	if err = randomize.Struct(seed, hogeTwo, hogeDBTypes, false, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hogeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hogeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Hoges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHogesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	hogeOne := &Hoge{}
	hogeTwo := &Hoge{}
	if err = randomize.Struct(seed, hogeOne, hogeDBTypes, false, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}
	if err = randomize.Struct(seed, hogeTwo, hogeDBTypes, false, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hogeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hogeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func hogeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func hogeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Hoge) error {
	*o = Hoge{}
	return nil
}

func testHogesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Hoge{}
	o := &Hoge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, hogeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Hoge object: %s", err)
	}

	AddHogeHook(boil.BeforeInsertHook, hogeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	hogeBeforeInsertHooks = []HogeHook{}

	AddHogeHook(boil.AfterInsertHook, hogeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	hogeAfterInsertHooks = []HogeHook{}

	AddHogeHook(boil.AfterSelectHook, hogeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	hogeAfterSelectHooks = []HogeHook{}

	AddHogeHook(boil.BeforeUpdateHook, hogeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	hogeBeforeUpdateHooks = []HogeHook{}

	AddHogeHook(boil.AfterUpdateHook, hogeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	hogeAfterUpdateHooks = []HogeHook{}

	AddHogeHook(boil.BeforeDeleteHook, hogeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	hogeBeforeDeleteHooks = []HogeHook{}

	AddHogeHook(boil.AfterDeleteHook, hogeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	hogeAfterDeleteHooks = []HogeHook{}

	AddHogeHook(boil.BeforeUpsertHook, hogeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	hogeBeforeUpsertHooks = []HogeHook{}

	AddHogeHook(boil.AfterUpsertHook, hogeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	hogeAfterUpsertHooks = []HogeHook{}
}

func testHogesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHogesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(hogeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHogesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHogesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HogeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHogesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Hoges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	hogeDBTypes = map[string]string{`ID`: `int`, `HogeName`: `varchar`, `UpdatedAt`: `timestamp`, `CreatedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testHogesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(hogePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(hogeAllColumns) == len(hogePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHogesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(hogeAllColumns) == len(hogePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Hoge{}
	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hogeDBTypes, true, hogePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(hogeAllColumns, hogePrimaryKeyColumns) {
		fields = hogeAllColumns
	} else {
		fields = strmangle.SetComplement(
			hogeAllColumns,
			hogePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HogeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHogesUpsert(t *testing.T) {
	t.Parallel()

	if len(hogeAllColumns) == len(hogePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLHogeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Hoge{}
	if err = randomize.Struct(seed, &o, hogeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Hoge: %s", err)
	}

	count, err := Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, hogeDBTypes, false, hogePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Hoge struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Hoge: %s", err)
	}

	count, err = Hoges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
